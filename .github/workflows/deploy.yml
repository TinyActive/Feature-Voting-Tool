name: Deploy Feature Voting

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  frontend:
    name: Deploy Frontend to Cloudflare Pages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          VITE_API_URL: https://feature-voting-worker.steep-morning-8706.workers.dev
          VITE_RECAPTCHA_SITE_KEY: ${{ secrets.RECAPTCHA_SITE_KEY }}

      - name: Deploy to Cloudflare Pages
        working-directory: ./frontend
        run: npx wrangler pages deploy dist --project-name=feature-voting-frontend --branch=main
        env:
          CLOUDFLARE_API_KEY: ${{ secrets.CF_API_KEY }}
          CLOUDFLARE_EMAIL: ${{ secrets.CF_EMAIL }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_KEY }}

  worker:
    name: Deploy Worker to Cloudflare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: worker/package-lock.json

      - name: Install dependencies
        working-directory: ./worker
        run: npm ci

      - name: Update Wrangler Config
        working-directory: ./worker
        run: |
          chmod +x update-wrangler-config.sh
          ./update-wrangler-config.sh
        env:
          CF_D1_DATABASE_ID: ${{ secrets.CF_D1_DATABASE_ID }}
          CF_KV_NAMESPACE_ID: ${{ secrets.CF_KV_NAMESPACE_ID }}

      - name: Run Database Migrations
        working-directory: ./worker
        run: |
          echo "Running base schema..."
          npx wrangler d1 execute feature-voting-db --file=./src/db/schema.sql --remote
          
          echo "Running migration for admin comments..."
          # Run migration but ignore error if column already exists (safe - no data loss)
          npx wrangler d1 execute feature-voting-db --file=./src/db/migration-add-admin-comments.sql --remote 2>&1 | tee migration.log || true
          
          # Check if migration succeeded or column already exists
          if grep -q "duplicate column name" migration.log; then
            echo "✓ Column is_admin already exists - skipping migration"
          elif grep -q "error" migration.log; then
            echo "⚠ Migration may have failed - check logs"
          else
            echo "✓ Migration completed successfully"
          fi
        env:
          CLOUDFLARE_API_KEY: ${{ secrets.CF_API_KEY }}
          CLOUDFLARE_EMAIL: ${{ secrets.CF_EMAIL }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}

      - name: Set Cloudflare Secrets
        working-directory: ./worker
        run: |
          echo "${{ secrets.ADMIN_TOKEN }}" | npx wrangler secret put ADMIN_TOKEN
          echo "${{ secrets.RESEND_API_KEY }}" | npx wrangler secret put RESEND_API_KEY
          echo "${{ secrets.TELEGRAM_BOT_TOKEN }}" | npx wrangler secret put TELEGRAM_BOT_TOKEN
          echo "${{ secrets.TELEGRAM_CHAT_ID }}" | npx wrangler secret put TELEGRAM_CHAT_ID
          echo "${{ secrets.RECAPTCHA_SECRET_KEY }}" | npx wrangler secret put RECAPTCHA_SECRET_KEY
        env:
          CLOUDFLARE_API_KEY: ${{ secrets.CF_API_KEY }}
          CLOUDFLARE_EMAIL: ${{ secrets.CF_EMAIL }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}

      - name: Deploy to Cloudflare Workers
        working-directory: ./worker
        run: npx wrangler deploy
        env:
          CLOUDFLARE_API_KEY: ${{ secrets.CF_API_KEY }}
          CLOUDFLARE_EMAIL: ${{ secrets.CF_EMAIL }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CF_D1_DATABASE_ID: ${{ secrets.CF_D1_DATABASE_ID }}
          CF_KV_NAMESPACE_ID: ${{ secrets.CF_KV_NAMESPACE_ID }}
          APP_URL: ${{ secrets.APP_URL || 'https://idea.nginxwaf.me' }}
          RECAPTCHA_SITE_KEY: ${{ secrets.RECAPTCHA_SITE_KEY }}

  notify:
    name: Send Telegram Notification
    needs: [frontend, worker]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify success
        if: needs.frontend.result == 'success' && needs.worker.result == 'success'
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "parse_mode=Markdown" \
            -d "text=✅ *Deploy Successful*%0A%0ACommit: \`${{ github.sha }}\`%0AAuthor: ${{ github.actor }}"

      - name: Notify failure
        if: needs.frontend.result == 'failure' || needs.worker.result == 'failure'
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "parse_mode=Markdown" \
            -d "text=❌ *Deploy Failed*%0A%0ACommit: \`${{ github.sha }}\`%0AAuthor: ${{ github.actor }}"
